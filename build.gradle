description = "High-performance non-blocking, multi-endpoint connection pool"

buildscript {
	repositories {
		mavenCentral()
	}
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"

group = "com.github.akurilov"
version = "1.0.2"

ext {
	moduleName = "${group}.netty.connection.pool"
	depVersion = [
		javaCommons: "[2.1.2,)",
		netty: "4.1.25.Final",
	]


}

repositories {
	mavenCentral()
}

dependencies {

	compile(
		"com.github.akurilov:java-commons:${depVersion.javaCommons}",
		"io.netty:netty-common:${depVersion.netty}",
		"io.netty:netty-transport:${depVersion.netty}",
	)

	testCompile(
		"junit:junit:[4,)",
		"io.netty:netty-transport-native-epoll:${depVersion.netty}:linux-x86_64",
	)
}

compileJava {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestJava {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	archiveName "$project.name.$extension"
	manifest {
		attributes(
			"Implementation-Version": version,
			"Implementation-Title": "$name"
		)
	}
}

test {
	doFirst {
		jvmArgs += [
			"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005",
			"-XX:+HeapDumpOnOutOfMemoryError",
		]
	}
	maxHeapSize "1g"
	/*
	systemProperty "com.sun.management.jmxremote", "true"
	systemProperty "com.sun.management.jmxremote.port", "9010"
	systemProperty "com.sun.management.jmxremote.rmi.port", "9010"
	systemProperty "com.sun.management.jmxremote.local.only", "false"
	systemProperty "com.sun.management.jmxremote.authenticate", "false"
	systemProperty "com.sun.management.jmxremote.ssl", "false"
	 */
	testLogging {
		events "passed", "skipped", "failed", "standardOut"
		showExceptions = true
		showStandardStreams = true
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	archiveName "$project.name-$classifier.$extension"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	archiveName "$project.name-$classifier.$extension"
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

def ossrhUsername = project.hasProperty("ossrhUsername") ?
	project.property("ossrhUsername") : null
def ossrhPassword = project.hasProperty("ossrhPassword") ?
	project.property("ossrhPassword") : null

signing {
	required {
		gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

// see http://central.sonatype.org/pages/gradle.html for details
uploadArchives {

	// prevent the execution for empty (not leaf) subprojects and tests packages
	if(project.name.contains("tests")) {
		return
	}

	repositories {
		mavenDeployer {
			beforeDeployment {
				MavenDeployment deployment -> signing.signPom(deployment)
			}

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom {

				groupId = rootProject.group
				name = "netty-connection-pool"
				artifactId = name

				project {
					description = rootProject.description

					url "https://github.com/akurilov/netty-connection-pool/wiki"

					scm {
						connection "https://github.com/akurilov/netty-connection-pool.git"
						developerConnection "https://github.com/akurilov/netty-connection-pool.git"
						url "https://github.com/akurilov/netty-connection-pool.git"
					}

					licenses {
						license {
							name "Apache 2.0 License"
							url "https://github.com/akurilov/netty-connection-pool/wiki/License"
						}
					}

					developers {
						developer {
							id "akurilov"
							name "Andrey Kurilov"
							email "akurilov123@gmail.com"
						}
					}
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "4.6"
}
